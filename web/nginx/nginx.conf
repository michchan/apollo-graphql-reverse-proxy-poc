load_module modules/ngx_http_js_module.so;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    js_path "/etc/nginx/njs/";
    js_import scripts from scripts.js;
    js_set $refresh_token scripts.extractRefreshTokenInRequestHeader;

    server {
        listen 80;
        server_name localhost;

        # Enable detailed logging to a mounted volume
        error_log /var/log/nginx/error.log debug;
        access_log /var/log/nginx/access.log;

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        location /graphql {
            # Proxy to the upstream server
            proxy_pass http://graphql_upstream/graphql;
            proxy_http_version 1.1;
            # Pass WebSocket headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $http_connection;
            # Pass other client headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Add the refresh token header
            proxy_set_header X-Refresh-Token $refresh_token;

            js_header_filter scripts.setRefreshTokenInResponseHeader;

            if ($http_upgrade != "websocket") {
                js_body_filter scripts.stripRefreshTokenInResponseBody;
            }
        }
    }

    upstream graphql_upstream {
        server graphql:4000;
    }
}